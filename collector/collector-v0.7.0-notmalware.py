#!/usr/bin/python
# -*- coding: utf-8 -*-
# version:0.7.0 (İyicil Apkların Manifest dosyaları ve kategorilendirme için.)

import xml.etree.ElementTree as ET
import sys
import getopt
import sqlite3 as sqlite
import time
import sha3

def get_hash(data):
  hdata = sha3.sha3_224(data.encode('utf-8')).hexdigest()
  return hdata

def insert_db():
  args_number=0
  with sqlite.connect('/dpart/db/abluka.db') as db:
    cursor=db.cursor()
    for xml_file in sys.argv:
     args_number += 1
     if args_number % 100 == 0:
         time.sleep(5)
     if xml_file!=sys.argv[0]:
      try:
        manifest = ET.parse(xml_file)
        root = manifest.getroot()
        namespace = '{http://schemas.android.com/apk/res/android}'
        print ("\033[0;37;44m " + xml_file + "\033[0;0;0m")
        #category = xml_file.split("/")[-2]
        #print "Dizin Adı/Kategori: " + category

        if 'package' in root.attrib:
          package_name = root.attrib['package']
          print "package-name: ", package_name

          phash_str = package_name       
          for uses_permission in root.iter('uses-permission'):
            phash_str = phash_str + "||" + uses_permission.attrib[namespace+'name'] 
   
          for permission in root.iter('permission'):
  	    phash_str = phash_str + "||" + permission.attrib[namespace+'name']

          psrhash_str = phash_str
          for service in root.iter('service'):
            psrhash_str = psrhash_str + "||" + service.attrib[namespace+'name'] 

          for receiver in root.iter('receiver'):
            psrhash_str = psrhash_str + "||" + receiver.attrib[namespace+'name'] 

  	  psr_hash = get_hash(psrhash_str)
          p_hash = get_hash(phash_str)

          cursor.execute("""SELECT psrHash FROM AppInfo WHERE psrHash=?""",[psr_hash])
          data = cursor.fetchone()
          if data is None:
            print "package-name: ", root.attrib['package']

            cursor.execute("""INSERT INTO AppInfo(packageName, pHash, psrHash) VALUES(?,?,?) """, (root.attrib['package'], p_hash, psr_hash))
    
            print "\n******************************CATEGORY-CLASS**********************************\n"
            # cursor.execute("""INSERT INTO Categories(categoryName, appInfoId) VALUES(?,(SELECT appInfoId FROM AppInfo WHERE psrHash=?))""",(category, psr_hash))
            cursor.execute("""INSERT INTO Classification(classificationName, appInfoId) VALUES(?,(SELECT appInfoId FROM AppInfo WHERE psrHash=?))""",("not-malware",psr_hash))

            print "\n----------USES-PERMISSIONS-------------\n"
            for uses_permission in root.iter('uses-permission'):
              print uses_permission.attrib[namespace+'name']
              cursor.execute("""INSERT INTO Permissions(permissionName, appInfoId) VALUES(?,(SELECT appInfoId FROM AppInfo WHERE psrHash=?))""",(uses_permission.attrib[namespace+'name'], psr_hash))

            print "\n************PERMISSIONS**************\n"      
            for permission in root.iter('permission'):
              print permission.attrib[namespace+'name']
              cursor.execute("""INSERT INTO Permissions(permissionName, appInfoId) VALUES(?,(SELECT appInfoId FROM AppInfo WHERE psrHash=?))""",(permission.attrib[namespace+'name'], psr_hash))

            print "\n------------SERVICES-----------\n"
            for service in root.iter('service'):
              print service.attrib[namespace+'name'] 
              cursor.execute("""INSERT INTO Services(serviceName, appInfoId) VALUES(?,(SELECT appInfoId FROM AppInfo WHERE psrHash=?))""",(service.attrib[namespace+'name'], psr_hash))

            print "\n***********RECEIVERS**********\n"
            for receiver in root.iter('receiver'):
              print receiver.attrib[namespace+'name']
              cursor.execute("""INSERT INTO Receivers(receiverName, appInfoId) VALUES(?,(SELECT appInfoId FROM AppInfo WHERE psrHash=?))""",(receiver.attrib[namespace+'name'], psr_hash))
            
            db.commit()
          else:
            print "Veritabanında zaten var"
            with open("/home/omfaer/errors-insert-abluka-notmalwere.txt","a") as err:
              err.write(xml_file + " --> dosyası zaten veritabanında var" + "\n")
            
      except Exception as e:
        print ("\033[0;37;44m " + xml_file + "dosyasında hata \033[0;0;0m")
        print ("\nVerdiği Hata: " + str(e) + "\n")
        with open("/home/omfaer/errors-insert-abluka-notmalware.txt","a") as err:
          err.write("Hata veren dosya:" + xml_file +"\n")
          err.write("Verdiği hata:" + str(e) +"\n\n\n\n")

insert_db()
